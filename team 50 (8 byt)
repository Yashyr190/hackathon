<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gaming Platform</title>
    <style>
        /* Styles for the user interface */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        header {
            background-color: #333;
            color: #fff;
            padding: 10px;
            text-align: center;
        }

        nav ul {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        nav ul li {
            display: inline;
            margin-right: 15px;
        }

        nav a {
            text-decoration: none;
            color: #fff;
        }

        section {
            margin: 20px;
        }

        h2 {
            color: #333;
        }

        footer {
            background-color: #333;
            color: #fff;
            text-align: center;
            padding: 10px;
            position: fixed;
            bottom: 0;
            width: 100%;
        }

        /* Styles for the feedback form */
        form {
            max-width: 400px;
            margin: auto;
        }

        label {
            display: block;
            margin-bottom: 8px;
        }

        input, textarea {
            width: 100%;
            padding: 8px;
            margin-bottom: 16px;
            box-sizing: border-box;
        }

        button {
            background-color: #333;
            color: #fff;
            padding: 10px;
            border: none;
            cursor: pointer;
        }

        /* Styles for the game genres */
        .genres {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
        }

        .genre {
            background-color: #333;
            color: #fff;
            padding: 10px;
            margin: 10px;
            text-align: center;
            cursor: pointer;
            width: 150px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Welcome to Our Gaming Platform</h1>
        <nav>
            <ul>
                <li><a href="#home">Home</a></li>
                <li><a href="#games">Games</a></li>
                <li><a href="#genres">Genres</a></li>
                <li><a href="#feedback">Feedback</a></li>
            </ul>
        </nav>
    </header>

    <section id="home">
        <h2>Featured Games</h2>
        <!-- Display featured games here -->
    </section>

    <section id="games">
        <h2>Explore Our Games</h2>
        <!-- Display a list of games with descriptions, genres, and links -->
    </section>

    <section id="genres">
        <h2>Game Genres</h2>
        <div class="genres">
            <div class="genre" onclick="filterGames('Action')">Action</div>
            <div class="genre" onclick="filterGames('Adventure')">Adventure</div>
            <div class="genre" onclick="filterGames('Racing')">Racing</div>
            <!-- Add more genres as needed -->
        </div>
    </section>

    <section id="feedback">
        <h2>User Feedback</h2>
        <form id="feedbackForm">
            <label for="userName">Name:</label>
            <input type="text" id="userName" name="userName" required>

            <label for="userFeedback">Feedback:</label>
            <textarea id="userFeedback" name="userFeedback" rows="4" required></textarea>

            <button type="submit">Submit Feedback</button>
        </form>
    </section>

    <footer>
        <p>&copy; 2024 Gaming Platform</p>
    </footer>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Simulating data fetching from an API
            function fetchData(url, callback) {
                fetch(url)
                    .then(response => response.json())
                    .then(data => callback(data))
                    .catch(error => console.error('Error fetching data:', error));
            }

            // Function to update the featured games section
            function updateFeaturedGames() {
                const featuredGamesSection = document.getElementById("home");

                // Simulating fetched data
                const featuredGamesData = [
                    { title: "Game 1", description: "Exciting game description 1", genre: "Action", link: "#" },
                    { title: "Game 2", description: "Awesome game description 2", genre: "Adventure", link: "#" },
                    // Add more games as needed
                ];

                // Update the DOM with the fetched data
                featuredGamesSection.innerHTML = `
                    <h2>Featured Games</h2>
                    <ul>
                        ${featuredGamesData.map(game => <li><a href="${game.link}">${game.title}</a>: ${game.description} (${game.genre})</li>).join('')}
                    </ul>`;
            }

            // Function to update the games section
            function updateGames() {
                const gamesSection = document.getElementById("games");

                // Simulating fetched data
                const gamesData = [
                    { title: "Game 1", description: "Exciting game description 1", genre: "Action", link: "#" },
                    { title: "Game 2", description: "Awesome game description 2", genre: "Adventure", link: "#" },
                    // Add more games as needed
                ];

                // Update the DOM with the fetched data
                gamesSection.innerHTML = `
                    <h2>Explore Our Games</h2>
                    <ul id="gamesList">
                        ${gamesData.map(game => <li data-genre="${game.genre}"><a href="${game.link}">${game.title}</a>: ${game.description} (${game.genre})</li>).join('')}
                    </ul>`;
            }

            // Fetch and update data when the page loads
            updateFeaturedGames();
            updateGames();

            // Add more functions for fetching and updating genres, user feedback, etc.

            // Handle feedback form submission
            const feedbackForm = document.getElementById("feedbackForm");
            feedbackForm.addEventListener("submit", function (event) {
                event.preventDefault();
                const userName = document.getElementById("userName").value;
                const userFeedback = document.getElementById("userFeedback").value;

                // Simulate sending feedback to the server (replace with actual server communication)
                console.log(Feedback received from ${userName}: ${userFeedback});
                
                // Optionally, clear the form after submission
                feedbackForm.reset();
            });

            // Function to filter games by genre
            window.filterGames = function (genre) {
                const gamesList = document.getElementById("gamesList");
                const games = gamesList.getElementsByTagName("li");

                for (let i = 0; i < games.length; i++) {
                    const gameGenre = games[i].getAttribute("data-genre");

                    if (genre === 'All' || gameGenre === genre) {
                        games[i].style.display = "block";
                    } else {
                        games[i].style.display = "none";
                    }
                }
            };
        });
    </script>
</body>
</html>
